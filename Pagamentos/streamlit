import streamlit as st
import psycopg2
import pandas as pd
from datetime import datetime, timedelta

# Função para fazer a conexão com o banco de dados
def connect_db():
    conn = psycopg2.connect(
        host="aws-0-sa-east-1.pooler.supabase.com",
        database="postgres",
        user="postgres.teotdhtxyafbgpctvtns",
        password="SENHAmaldita@33",
        port="6543"
    )
    return conn

# Função para realizar o login
def login():
    st.title("Login - Sistema de Pagamentos")

    # Inputs de login
    username = st.text_input("Usuário")
    password = st.text_input("Senha", type="password")

    if st.button("Login"):
        if username == "admin" and password == "admin123":  # Exemplo de verificação simples
            st.success("Login bem-sucedido!")
            return True
        else:
            st.error("Usuário ou senha inválidos")
            return False
    return False

# Função para exibir as contas próximas ao vencimento
def show_due_payments():
    conn = connect_db()
    cursor = conn.cursor()

    # Definir a data atual e o intervalo de dias (ex: contas a vencer nos próximos 7 dias)
    today = datetime.today().date()
    due_date_limit = today + timedelta(days=7)

    query = '''
        SELECT id, emissao, vencimento, fornecedor, nf, nuf, ordem, status
        FROM pagamentos
        WHERE vencimento <= %s AND vencimento >= %s
        ORDER BY vencimento;
    '''

    cursor.execute(query, (due_date_limit, today))
    rows = cursor.fetchall()

    if rows:
        st.subheader("Contas Próximas ao Vencimento")
        df = pd.DataFrame(rows, columns=["ID", "Emissão", "Vencimento", "Fornecedor", "NF", "NUF", "Ordem", "Status"])
        st.write(df)
    else:
        st.warning("Não há contas próximas ao vencimento.")

    conn.close()

# Função principal do app
def main():
    if login():
        show_due_payments()

if __name__ == "__main__":
    main()
